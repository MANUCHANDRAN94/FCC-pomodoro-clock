{"version":3,"sources":["components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["Break","props","breakLength","decBreakLengthByOneMinute","incBreakLengthByOneMinute","breakLengthInMinutes","moment","duration","minutes","id","onClick","Session","sessionLength","incSessionLengthByOneMinute","decSessionLengthByOneMinute","sessionLengthInMinutes","asMinutes","momentDurationFormatSetup","TimeLeft","handleStartStopClick","timerLabel","startStopButtonLabel","timeLeft","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","setSessionLength","setBreakLength","currentSessionType","setCurrentSessionType","setTimeLeft","intervalId","setIntervalId","useEffect","current","play","isStarted","className","newBreakLength","clearInterval","newIntervalId","setInterval","prevTimeLeft","newSessionLength","load","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d786e823.chunk.js","sourcesContent":["import moment from 'moment';\r\nimport React from \"react\";\r\n\r\nconst Break = (props) => {\r\n const {breakLength ,decBreakLengthByOneMinute, incBreakLengthByOneMinute} = props;\r\n  const breakLengthInMinutes = moment.duration(breakLength , 's').minutes();\r\n  return (\r\n    <div>\r\n      <p id=\"break-label\">Break</p>\r\n      <p id=\"break-length\">{breakLengthInMinutes}</p>\r\n      <button id=\"break-increment\" onClick={incBreakLengthByOneMinute}>\r\n        +\r\n      </button>\r\n      <button id=\"break-decrement\" onClick={decBreakLengthByOneMinute}>\r\n        -\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Break;\r\n","import moment from 'moment';\r\nimport React from \"react\";\r\n\r\nconst Session = (props) => {\r\n  const {sessionLength , incSessionLengthByOneMinute , decSessionLengthByOneMinute}= props;\r\n  const sessionLengthInMinutes = moment.duration(sessionLength, \"s\").asMinutes();\r\n  \r\n  return (\r\n    <div>\r\n      <p id=\"session-label\">Session</p>\r\n      <p id=\"session-length\" >{sessionLengthInMinutes}</p>\r\n      <button id=\"session-increment\" onClick={incSessionLengthByOneMinute}>\r\n        +\r\n      </button>\r\n      <button id=\"session-decrement\" onClick={decSessionLengthByOneMinute}>\r\n        -\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","import moment from \"moment\";\r\nimport momentDurationFormatSetup from \"moment-duration-format\";\r\nimport React from \"react\";\r\n\r\nmomentDurationFormatSetup(moment);\r\n\r\nfunction TimeLeft({handleStartStopClick, timerLabel , \r\n     startStopButtonLabel , timeLeft}) {\r\n  \r\n  \r\n\r\n  const formattedTimeLeft = moment\r\n    .duration(timeLeft, \"s\")\r\n    .format(\"mm:ss\", { trim: false });\r\n  return (\r\n    <div>\r\n      <p id=\"timer-label\">{timerLabel}</p>\r\n      <p id=\"time-left\">{formattedTimeLeft}</p>\r\n      <button id=\"start_stop\" onClick={handleStartStopClick}>\r\n        {startStopButtonLabel}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeLeft;\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Break from \"./components/Break\";\nimport Session from \"./components/Session\";\nimport TimeLeft from \"./components/TimeLeft\";\n\nfunction App() {\n  const audioElement = useRef(null);\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n  const [currentSessionType, setCurrentSessionType] = useState(\"Session\");\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n  const [intervalId, setIntervalId] = useState(null);\n\n  //change timeLeft when sessionLength changes\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  //;isten to timeleft changes\n  //changes to break or break to session\n  useEffect(() => {\n    //if timeleft is zero\n    if (timeLeft === 0) {\n      //play the audio\n      audioElement.current.play();\n      if (currentSessionType === \"Session\") {\n        setCurrentSessionType(\"Break\");\n        setTimeLeft(breakLength);\n      } else if (currentSessionType === \"Break\") {\n        setCurrentSessionType(\"Session\");\n        setTimeLeft(sessionLength);\n      }\n    }\n  }, [breakLength, currentSessionType, sessionLength, timeLeft]);\n\n  const decBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength);\n    }\n  };\n  const incBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength + 60;\n    if (newBreakLength <= 60 * 60) {\n      setBreakLength(newBreakLength);\n    } else {\n      setBreakLength(60 * 60);\n    }\n  };\n\n  const decSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    }\n  };\n  const incSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(newSessionLength);\n    } else {\n      setSessionLength(60 * 60);\n    }\n  };\n\n  const isStarted = intervalId !== null;\n\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      //if we are in started mode: we want to stop the timer - with clear interval\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => prevTimeLeft - 1);\n      }, 100);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const handleResetButtonClick = () => {\n    // reset audio\n    audioElement.current.load();\n    //clear the timeout interval\n    clearInterval(intervalId);\n    //set the intervalId null\n    setIntervalId(null);\n    //set the session to 'Session\n    setCurrentSessionType(\"Session\");\n    //reset the session length to 25 minutes\n    setSessionLength(60 * 25);\n    //reset the break length to 5 minutes\n    setBreakLength(60 * 5);\n    //reset the timer to 25 minutes (initial session length)\n    setTimeLeft(60 * 25);\n  };\n  return (\n    <div className=\"App\">\n      <Break\n        breakLength={breakLength}\n        decBreakLengthByOneMinute={decBreakLengthByOneMinute}\n        incBreakLengthByOneMinute={incBreakLengthByOneMinute}\n      />\n      <TimeLeft\n        handleStartStopClick={handleStartStopClick}\n        timerLabel={currentSessionType}\n        startStopButtonLabel={isStarted ? \"Stop\" : \"Start\"}\n        timeLeft={timeLeft}\n      />\n      <Session\n        sessionLength={sessionLength}\n        decSessionLengthByOneMinute={decSessionLengthByOneMinute}\n        incSessionLengthByOneMinute={incSessionLengthByOneMinute}\n      />\n      <button id=\"reset\" onClick={handleResetButtonClick}>\n        Reset\n      </button>\n      <audio ref={audioElement} id=\"beep\">\n        <source\n          src=\"https://file-examples-com.github.io/uploads/2017/11/file_example_MP3_700KB.mp3\"\n          type=\"audio/mpeg\"\n        />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}